<!DOCTYPE html>
<html lang="id">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Simulasi Radio Lokal + Waterfall</title>
<style>
    body { font-family: Arial; text-align: center; background: #111; color: #fff; }
    h1 { margin-top: 20px; }
    button { padding: 10px 20px; margin: 5px; cursor: pointer; background: #444; color: #fff; border: none; border-radius: 5px; }
    button:hover { background: #666; }
    input[type=file] { margin: 20px; }
    canvas { display: block; margin: 20px auto; background: #000; border: 1px solid #444; }
</style>
</head>
<body>

<h1>Simulasi Radio Lokal + Waterfall</h1>

<input type="file" id="upload" accept="audio/*">
<div>
    <button onclick="playAudio()">Play</button>
    <button onclick="pauseAudio()">Pause</button>
</div>

<audio id="radioPlayer" controls></audio>
<canvas id="waterfall" width="800" height="300"></canvas>

<script>
const player = document.getElementById('radioPlayer');
const uploadInput = document.getElementById('upload');
const canvas = document.getElementById('waterfall');
const ctx = canvas.getContext('2d');

// Web Audio API
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
let source = null;
const analyser = audioCtx.createAnalyser();
analyser.fftSize = 512;
const bufferLength = analyser.frequencyBinCount;
const dataArray = new Uint8Array(bufferLength);

// Upload audio lokal
uploadInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if(file) {
        const url = URL.createObjectURL(file);
        player.src = url;

        // Hubungkan Web Audio API
        if(source) source.disconnect();
        source = audioCtx.createMediaElementSource(player);
        source.connect(analyser);
        analyser.connect(audioCtx.destination);
    }
});

function playAudio() {
    audioCtx.resume().then(() => {
        player.play();
    });
}

function pauseAudio() {
    player.pause();
}

// Waterfall / spectrum visualization
function drawWaterfall() {
    requestAnimationFrame(drawWaterfall);
    if(!source) return;

    analyser.getByteFrequencyData(dataArray);

    // Geser waterfall ke atas
    ctx.drawImage(canvas, 0, -2, canvas.width, canvas.height);

    // Gambar garis frekuensi baru di bawah
    for(let i = 0; i < bufferLength; i++) {
        const value = dataArray[i];
        //const color = `rgb(${value}, ${value/2}, 255)`;
        const r = Math.min(255, value * 2);
        const g = Math.min(255, value * 1.5);
        const b = Math.min(225, 225 - value/2);
        ctx.fillStyle = `rgb(${r},${g},${b})`;
        const x = Math.floor(i * (canvas.width / bufferLength));
        ctx.fillRect(x, canvas.height-2, 2, 2);
    }
}

drawWaterfall();
</script>

</body>
</html>



